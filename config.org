* Package manager
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

* Packages
** Evil
#+begin_src emacs-lisp
(defvar bootstrap-version)
(use-package evil
  :straight t
  :init
  (setq evil-want-keybinding nil
        evil-want-integration t
        evil-want-C-u-scroll t
        evil-undo-system 'undo-redo)
  :config
  (evil-mode 1))

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))
#+end_src
 
** LSP
#+begin_src emacs-lisp
(use-package lsp-ui
  :straight t
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-delay 0.0
        lsp-ui-doc-show-with-cursor t
        lsp-ui-doc-show-with-mouse t

        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-show-hover t))

(use-package lsp-mode
  :straight t
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :config

  (setq lsp-rust-analyzer-cargo-watch-command "clippy"
        lsp-eldoc-render-all t
        lsp-inlay-hint-enable t))

(use-package lsp-pyright
  :straight t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))
#+end_src

** Which key
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :config
  (which-key-mode 1))
#+end_src

** Comany
#+begin_src emacs-lisp
(use-package company
  :straight t
  :config
  (global-company-mode)
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0))

(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode))
#+end_src

** Completion
#+begin_src emacs-lisp
(use-package hotfuzz
  :straight t)

(use-package vertico
  :straight t
  :config
  (setq completion-styles '(hotfuzz))
  (vertico-mode 1)
  (vertico-mouse-mode 1))

(use-package marginalia
  :straight t
  :init
  (marginalia-mode 1))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package spacemacs-theme
  :straight t
  :config
  (load-theme 'spacemacs-dark t))
#+end_src
  
* Org Mode
** Add org-tempo for keybindings
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Fix org indenting
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)

;; No indenting in src blocks
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src

** Make org choose between fixed and variable pitched
https://yoo2080.wordpress.com/2013/05/30/monospace-font-in-tables-and-source-code-blocks-in-org-mode-proportional-font-in-other-parts/

#+begin_src emacs-lisp
(set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font" :height 120)

(add-hook 'org-mode-hook 'variable-pitch-mode)

(defun my-adjoin-to-list-or-symbol (element list-or-symbol)
  (let ((list (if (not (listp list-or-symbol))
                  (list list-or-symbol)
                list-or-symbol)))
    (require 'cl-lib)
    (cl-adjoin element list)))

(eval-after-load "org"
  '(mapc
    (lambda (face)
      (set-face-attribute
       face nil
       :inherit
       (my-adjoin-to-list-or-symbol
        'fixed-pitch
        (face-attribute face :inherit))))
    (list 'org-code 'org-block 'org-table)))
#+end_src

* Keybindings
#+begin_src emacs-lisp
(evil-set-leader 'motion (kbd "SPC"))
(evil-define-key 'normal 'global (kbd "<leader>ff") 'find-file)

(evil-define-key 'normal 'global (kbd "<leader>bi") 'ibuffer)
(evil-define-key 'normal 'global (kbd "<leader>bk") 'kill-this-buffer)
(evil-define-key 'normal 'global (kbd "<leader>bn") 'next-buffer)
(evil-define-key 'normal 'global (kbd "<leader>bp") 'previous-buffer)
(evil-define-key 'normal 'global (kbd "<leader>br") 'revert-buffer)
(evil-define-key 'normal 'global (kbd "<leader>bs") 'scratch-buffer)

(evil-define-key 'normal 'global (kbd "<leader>tc") 'shell-command)
(evil-define-key 'normal 'global (kbd "<leader>tt") 'ansi-term)

(global-set-key (kbd "C-/") 'comment-line)
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Other settings
** Disable backup files
#+begin_src emacs-lisp
(setq make-backup-files nil
      create-lockfiles nil)
#+end_src
 
** Disable cursor blinking
#+begin_src emacs-lisp
(blink-cursor-mode -1)
#+end_src

** Automatic delimiter pairs
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** Transparent background
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 95))
#+end_src

** Make scrolling with jk more natural
#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-margin 5)
#+end_src

** Disable some gui elements
#+begin_src emacs-lisp
(tool-bar-mode -1)

(setq use-dialog-box nil)
#+end_src

** Change the font
#+begin_src emacs-lisp
(set-frame-font "Hack Nerd Font 11" nil t)
#+end_src

** Line numbers in prog-mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Better mode line
#+begin_src emacs-lisp
(column-number-mode 1)
;; (display-battery-mode 1)
;; (setq display-time-24hr-format t)
;; (display-time-mode 1)
#+end_src

** Start with a blank org scratch buffer
#+begin_src emacs-lisp
(setq inhibit-startup-message t  
      initial-scratch-message "* GNU Emacs"
      initial-major-mode 'org-mode)
#+end_src

